import asyncio
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN_API1
from storage import COMMANDS, DESCRIPTION, CLARIFICATION, DAYS, DAYZ
from keyboards import kb, kb1, kb11, kb2, kb3, kb4, kb227
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State, StatesGroupMeta
from sqlite import db_start, new_event, get_week_events, dell_event, get_day_events, check_profile, add_profile, \
    get_profiles, get_user, edit_notif_state, edit_notif_time

storage = MemoryStorage()
bot = Bot(TOKEN_API1)
dp = Dispatcher(bot=bot,
                storage=storage)


class ClientStatesGroup(StatesGroup):

    registration = State()

    day = State()
    event = State()

    dell = State()
    dell_compl = State()

    show_event = State()
    event_day = State()

    notification = State()
    notification_time = State()

async def on_startup(_):
    await db_start()
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!')


async def day():
    day_now = datetime.today().weekday()
    day_now = DAYZ[day_now]
    return day_now


async def send_notification():
    profiles = await get_profiles()
    now = await day()
    for profile in profiles:
        if profile[4] == 1:
            if datetime.now().strftime('%H:%M') == profile[3]:
                events = await get_week_events(profile[1])
                events_dayl = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:"
                x = 0
                for event in events:
                    if now in event:
                        x += 1
                        events_dayl += '\n' + str(x) + ': ' + event[3] + ' ' + event[4]
                        await bot.send_message(text='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n'+events_dayl,
                                               chat_id=profile[1])

                if x == 0:
                    await bot.send_message(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª'
                                                '–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
                                                '–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
                                           chat_id=profile[1])


# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –±–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–∏–±–æ –Ω–∞ –¥–µ–Ω—å –ª–∏–±–æ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def show_all_events(message: types.Message, days) -> None:
    chat_id = str(message.from_user.id)
    events = await get_week_events(chat_id)
    events_dayl = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:"
    if type(days) == str:
        x = 0
        for event in events:
            if days in event:
                x += 1
                events_dayl += '\n' + str(x) + ': ' + event[3] + ' ' + event[4]
        if x == 0:
            events_dayl += '\n–ü—É—Å—Ç–æ üòî'
    else:
        for day in days:
            events_dayl += '\n'
            x = 0
            if day not in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–ß–µ—Ç–≤–µ—Ä–≥', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']:
                correct_day = day[0:-1] + '—É'
                events_dayl += '\n' + f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {correct_day}'
            else:
                events_dayl += '\n' + f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}'
            for event in events:
                if day in event:
                    x += 1
                    events_dayl += '\n' + str(x) + ': ' + event[3] + ' ' + event[4]
            if x == 0:
                events_dayl += '\n–ü—É—Å—Ç–æ üòî'
    await bot.send_message(text=events_dayl,
                           chat_id=message.from_user.id)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message) -> None:
    if await check_profile(user_id=message.from_user.id):
        await bot.send_message(chat_id=message.from_user.id,
                               text='–ü—Ä–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!',
                               reply_markup=kb)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–ü—Ä–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! \n'
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã '
                                    '–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è \n'
                                    '—É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª')
        await ClientStatesGroup.registration.set()


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
@dp.message_handler(Text(equals='–û–ø–∏—Å–∞–Ω–∏–µ'))
async def description_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ù–µ–º–Ω–æ–≥–æ –æ–±–æ –º–Ω–µ\n{DESCRIPTION}',
                           parse_mode='HTML')


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(Text(equals='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'), state=None)
async def plans_command(message: types.Message, state: FSMContext):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏–π',
                         parse_mode='HTML',
                         reply_markup=kb2)


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(Text(equals='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'), state="*")
async def plans_command(message: types.Message, state: FSMContext):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç',
                         parse_mode='HTML',
                         reply_markup=kb4)
    await ClientStatesGroup.notification.set()


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state="*")
async def back_command(message: types.Message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         parse_mode='HTML',
                         reply_markup=kb)


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥'), state="*")
async def back_command(message: types.Message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥',
                         parse_mode='HTML',
                         reply_markup=kb2)


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'), state="*")
async def back_command(message: types.Message, state: FSMContext):
    if state is None:
        return
    await ClientStatesGroup.show_event.set()
    await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥',
                         parse_mode='HTML',
                         reply_markup=kb3)


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –≥–¥–µ –æ–Ω —Å–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(Text(equals='–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ'), state=None)
async def new_command(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                         parse_mode='HTML',
                         reply_markup=kb1)
    await ClientStatesGroup.day.set()


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –≥–¥–µ —Å–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –≥–¥–µ –æ–Ω —Å–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –¥–ª—è –∫–æ—Ä–µ–∫—Ü–∏–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'), state=None)
async def new_command(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                         parse_mode='HTML',
                         reply_markup=kb1)
    await ClientStatesGroup.dell.set()


@dp.message_handler(Text(equals='–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'), state=None)
async def new_command(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                         parse_mode='HTML',
                         reply_markup=kb3)
    await ClientStatesGroup.show_event.set()


@dp.message_handler(Text(equals='–ù–∞ –Ω–µ–¥–µ–ª—é'), state=ClientStatesGroup.show_event)
async def new_command(message: types.Message, state: FSMContext):
    await message.answer(text='–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é',
                         parse_mode='HTML',
                         reply_markup=kb2)
    await show_all_events(message, DAYS)
    await state.finish()


@dp.message_handler(Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è'), state=ClientStatesGroup.notification)
async def new_command(message: types.Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
                              '–í —Ñ–æ—Ä–º–∞—Ç–µ: HH:MM (H-—á–∞—Å—ã, M-–º–∏–Ω—É—Ç—ã)\n'
                              '–ù–∞–ø—Ä–∏–º–µ—Ä: 10:30 –∏–ª–∏ 12:33,',
                         parse_mode='HTML')
    await ClientStatesGroup.next()


@dp.message_handler(Text(equals='–ù–∞ –¥–µ–Ω—å'), state=ClientStatesGroup.show_event)
async def new_command(message: types.Message, state: FSMContext):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                         parse_mode='HTML',
                         reply_markup=kb11)
    await ClientStatesGroup.next()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(Text(equals=('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                                 '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')),
                    state=ClientStatesGroup.day)
async def days_command(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['day'] = message.text
    await ClientStatesGroup.next()
    await message.answer(text=CLARIFICATION,
                         reply_markup=kb227)


# –û–±—Ä–∞—Ç–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(Text(equals=('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                                 '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')),
                    state=ClientStatesGroup.dell)
async def days_command(message: types.Message, state: FSMContext):
    chat_id = str(message.from_user.id)
    # —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    if message.text not in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–ß–µ—Ç–≤–µ—Ä–≥', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']:
        correct_day = message.text[0:-1] + '—É'
        await message.answer(text=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {correct_day}")
    else:
        await message.answer(text=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}")
    await show_all_events(message, message.text)

    async with state.proxy() as data:
        data['day'] = message.text

    # —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–ª–∞–Ω–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    if await get_day_events(chat_id, message.text) == []:
        await message.answer(text='–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ',
                             reply_markup=kb2)
        await state.finish()
    else:
        await message.answer(text='–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
                             reply_markup=kb227)
        await ClientStatesGroup.next()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
@dp.message_handler(Text(equals=('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                                 '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')),
                    state=ClientStatesGroup.event_day,)
async def days_command(message: types.Message, state: FSMContext):
    if message.text not in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–ß–µ—Ç–≤–µ—Ä–≥', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']:
        correct_day = message.text[0:-1] + '—É'
        await message.answer(text=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {correct_day}",
                             reply_markup=kb2)
    else:
        await message.answer(text=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}",
                             reply_markup=kb2)
    await show_all_events(message, message.text)
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.message_handler(Text(equals=('–í–∫–ª—é—á–∏—Ç—å', '–í—ã–∫–ª—é—á–∏—Ç—å')),
                    state=ClientStatesGroup.notification)
async def set_notif_state_command(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if message.text == '–í—ã–∫–ª—é—á–∏—Ç—å' and user[0][4] == 1:
        await edit_notif_state(0, user_id=str(message.from_user.id))
        await message.answer(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã',
                             reply_markup=kb)
        await state.finish()
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å' and user[0][4] == 0:
        await message.answer(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã',
                             reply_markup=kb)
        await edit_notif_state(1, user_id=str(message.from_user.id))
        await state.finish()
    else:
        if message.text == '–í–∫–ª—é—á–∏—Ç—å':
            await message.answer(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã',
                             reply_markup=kb4)
            await ClientStatesGroup.notification.set()
        elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å':
            await message.answer(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω—ã',
                                 reply_markup=kb4)
            await ClientStatesGroup.notification.set()


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–¥ —Å–æ–±—ã—Ç–∏—è  –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.message_handler(state=ClientStatesGroup.event)
async def new_command(message: types.Message, state: FSMContext):
    try:
        if message.text.count(':') == 2:
            async with state.proxy() as data:
                a = message.text
                data['name_event'] = a[:a.find(':')-2]
                data['time_event'] = a[a.find(':')-2:]
            await message.reply('–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
                                reply_markup=kb2)
            async with state.proxy() as data:
                await bot.send_message(text=data['day'] + ' ' + data['name_event'] + ' ' + data['time_event'],
                                       chat_id=message.from_user.id)
            await new_event(state, user_id=message.from_user.id)
            await state.finish()
        else:
            await bot.send_message(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è\n'
                                        '–í —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º –≤ —Ñ–æ—Ä–º–µ',
                                   chat_id=message.from_user.id)
    except:
        await bot.send_message(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è\n'
                                    '–í —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º –≤ —Ñ–æ—Ä–º–µ',
                               chat_id=message.from_user.id)


# —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –±–¥
@dp.message_handler(state=ClientStatesGroup.dell_compl)
async def dell_command(message: types.Message, state: FSMContext):
    chat_id = str(message.from_user.id)
    events = await get_week_events(chat_id)
    y = 0
    async with state.proxy() as data:
        for event in events:
            if data['day'] in event:
                y += 1
    try:
        if 0 < int(message.text) <= y:
            chat_id = str(message.from_user.id)
            events = await get_week_events(chat_id)
            y = 0
            smth = {}
            async with state.proxy() as data:
                for event in events:
                    if data['day'] in event:
                        y += 1
                        smth[str(y)] = event[0]
                        await bot.send_message(chat_id=message.from_user.id,
                                               text=str(y) + ': ' + event[3] + ' ' + event[4])
            await dell_event(smth[message.text])
            await message.answer(text='–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                                 reply_markup=kb2)
            await show_all_events(message, data['day'])
            await state.finish()
        else:
            await bot.send_message(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                                   chat_id=message.from_user.id)
    except:
        await bot.send_message(text='–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                               chat_id=message.from_user.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.message_handler(state=ClientStatesGroup.notification_time)
async def change_notif_time_command(message: types.Message, state: FSMContext):
    try:
        if message.text.count(':') == 1 and int(message.text[0:message.text.find(':')]) < 25:
            await edit_notif_time(message.text, user_id=str(message.from_user.id))
            await bot.send_message(text='–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                                   chat_id=message.from_user.id,
                                   reply_markup=kb)
            await state.finish()
        else:
            await bot.send_message(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º',
                                   chat_id=message.from_user.id)
    except:
        await bot.send_message(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º',
                               chat_id=message.from_user.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è
@dp.message_handler(state=ClientStatesGroup.registration)
async def new_command(message: types.Message, state: FSMContext):
    try:
        if message.text == '–ò—Å—Ç-21':
            async with state.proxy() as data:
                data['name_group'] = message.text
            await add_profile(state, user_id=message.from_user.id)
            await bot.send_message(text='–û—Ç–ª–∏—á–Ω–æ –≤–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª\n'
                                        '–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                   chat_id=message.from_user.id,
                                   reply_markup=kb)
            await state.finish()
        else:
            await bot.send_message(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                                   chat_id=message.from_user.id)
    except:
        pass


def repeat(coro, loop):
    asyncio.ensure_future(coro(), loop=loop)
    loop.call_later(60, repeat, coro, loop)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.call_later(60, repeat, send_notification, loop)
    executor.start_polling(dp, loop=loop,
                           on_startup=on_startup,
                           skip_updates=True
                           )



